cartlist.vue:
<template>
  <div id="cart">
    <div class="cart--header has-text-centered">
      <i class="fa fa-2x fa-shopping-cart"></i>
    </div>
    <p v-if="cartItems.length === 0" class="cart-empty-text has-text-centered">
      Add some items to the cart!
    </p>
    <ul v-if="cartItems.length > 0">
      <li v-for="cartItem in cartItems" :key="cartItem.id" class="cart-item">
        <CartListItem :cartItem="cartItem" />
      </li>
      <div class="cart-details">
        <p>
          Total Quantity:
          <span class="has-text-weight-bold">{{ cartQuantity }}</span>
        </p>
        <p @click="removeAllCartItems" class="cart-remove-all--text">
          <i class="fa fa-trash"></i>Remove all
        </p>
      </div>
    </ul>
    <button :disabled="cartItems.length === 0" class="button is-primary">
      Checkout (<span class="has-text-weight-bold">${{ cartTotal }}</span
      >)
    </button>
  </div>
</template>

<script>
import { mapGetters, mapActions } from "vuex";
import CartListItem from "./CartListItem.vue";

export default {
  name: "CartList",
  computed: {
    ...mapGetters(["cartItems", "cartTotal", "cartQuantity"]),
  },
  created() {
    this.$store.dispatch("cart/getCartItems");
  },
  components: {
    CartListItem,
  },
  methods: {
    ...mapActions(["removeAllCartItems"]),
  },
};
</script>

<style scoped>
#cart {
  height: 100%;
  padding: 30px 10px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

#cart .cart-empty-text {
  padding: 10px 0;
}

#cart .cart--header {
  border-bottom: 1px solid #e8e8e8;
  padding-bottom: 15px;
}

#cart .cart-item {
  padding: 10px 0;
}

#cart .cart-details {
  font-size: 12px;
  display: flex;
  justify-content: space-between;
  padding: 15px;
}

#cart .cart-remove-all--text {
  cursor: pointer;
}

#cart .cart-remove-all--text .fa {
  padding-right: 5px;
}
</style>
<template>
  <div id="cart">
    <div class="cart--header has-text-centered">
      <i class="fa fa-2x fa-shopping-cart"></i>
    </div>
    <p v-if="cartItems.length === 0" class="cart-empty-text has-text-centered">
      Add some items to the cart!
    </p>
    <ul v-if="cartItems.length > 0">
      <li v-for="cartItem in cartItems" :key="cartItem.id" class="cart-item">
        <CartListItem :cartItem="cartItem" />
      </li>
      <div class="cart-details">
        <p>
          Total Quantity:
          <span class="has-text-weight-bold">{{ cartQuantity }}</span>
        </p>
        <p @click="removeAllCartItems" class="cart-remove-all--text">
          <i class="fa fa-trash"></i>Remove all
        </p>
      </div>
    </ul>
    <button :disabled="cartItems.length === 0" class="button is-primary">
      Checkout (<span class="has-text-weight-bold">${{ cartTotal }}</span
      >)
    </button>
  </div>
</template>

<script>
import { mapGetters, mapActions } from "vuex";
import CartListItem from "./CartListItem.vue";

export default {
  name: "CartList",
  computed: {
    ...mapGetters(["cartItems", "cartTotal", "cartQuantity"]),
  },
  created() {
    this.$store.dispatch("cart/getCartItems");
  },
  components: {
    CartListItem,
  },
  methods: {
    ...mapActions(["removeAllCartItems"]),
  },
};
</script>

<style scoped>
#cart {
  height: 100%;
  padding: 30px 10px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

#cart .cart-empty-text {
  padding: 10px 0;
}

#cart .cart--header {
  border-bottom: 1px solid #e8e8e8;
  padding-bottom: 15px;
}

#cart .cart-item {
  padding: 10px 0;
}

#cart .cart-details {
  font-size: 12px;
  display: flex;
  justify-content: space-between;
  padding: 15px;
}

#cart .cart-remove-all--text {
  cursor: pointer;
}

#cart .cart-remove-all--text .fa {
  padding-right: 5px;
}
</style>
productlist.vue:
<template>
  <div id="products" class="box">
    <div class="products--header has-text-centered">
      <i class="fa fa-2x fa-user-circle"></i>
    </div>
    <div class="product-list">
      <div
        v-for="productItem in productItems"
        :key="productItem.id"
        class="product-list--item"
      >
        <ProductListItem :productItem="productItem" />
      </div>
    </div>
    <div class="product-count has-text-right">
      <span class="has-text-weight-bold"># of products: 4</span>
    </div>
  </div>
</template>

<script>
import { mapGetters } from "vuex";
import ProductListItem from "./ProductListItem.vue";

export default {
  name: "ProductList",
  computed: {
    ...mapGetters(["productItems"]),
  },
  created() {
    this.$store.dispatch("product/getProductItems");
  },
  components: {
    ProductListItem,
  },
};
</script>

<style scoped>
.products--header {
  border-bottom: 1px solid #e8e8e8;
  padding-bottom: 15px;
}

.product-list {
  padding-top: 10px;
}

.product-list--item {
  padding: 10px 0;
}
</style>
cart/index.js:
import axios from "axios";

const state = () => ({
  cartItems: [],
  loading: false, // Có thể thêm loading/error riêng cho cart
  error: null,
});

const mutations = {
  UPDATE_CART_ITEMS(state, payload) {
    state.cartItems = payload;
  },
  SET_CART_LOADING(state, isLoading) {
    state.loading = isLoading;
  },
  SET_CART_ERROR(state, error) {
    state.error = error;
  },
  // Không cần các mutation riêng cho add/remove vì server luôn trả về cart mới
};

const actions = {
  async getCartItems({ commit, rootState }) {
    const token = rootState.login.token;
    if (!token) {
      console.warn("[Cart Actions] No token, cannot fetch cart.");
      commit("SET_CART_ERROR", "Authentication required");
      // commit('UPDATE_CART_ITEMS', []); // Có thể reset cart về rỗng
      return;
    }
    commit("SET_CART_LOADING", true);
    commit("SET_CART_ERROR", null);
    console.log("[Cart Actions] Fetching cart items...");
    try {
      const response = await axios.get("/api/cart", { params: { token } });
      commit("UPDATE_CART_ITEMS", response.data);
      console.log("[Cart Actions] Cart fetched.");
    } catch (error) {
      console.error(
        "[Cart Actions] Error fetching cart:",
        error.response?.data || error.message
      );
      commit(
        "SET_CART_ERROR",
        error.response?.data?.message || "Failed to fetch cart"
      );

      if (error.response && error.response.status === 401) {
        // dispatch('login/logoutAction', null, { root: true });
      }
    } finally {
      commit("SET_CART_LOADING", false);
    }
  },

  async addCartItem({ commit, rootState }, product) {
    const token = rootState.login.token;
    if (!token) return Promise.reject("Authentication required"); // Trả về lỗi

    commit("SET_CART_LOADING", true); // Có thể set loading khi thao tác
    commit("SET_CART_ERROR", null);
    console.log("[Cart Actions] Adding item via API:", product);
    try {
      // Gửi yêu cầu POST, data là product, token trong params
      const response = await axios.post("/api/cart", product, {
        params: { token },
      });
      commit("UPDATE_CART_ITEMS", response.data); // Cập nhật state bằng response từ server
      console.log("[Cart Actions] Item added, cart updated from server.");
      return Promise.resolve(); // Báo thành công
    } catch (error) {
      console.error(
        "[Cart Actions] Error adding item:",
        error.response?.data || error.message
      );
      commit(
        "SET_CART_ERROR",
        error.response?.data?.message || "Failed to add item"
      );
      if (error.response && error.response.status === 401) {
        // dispatch('login/logoutAction', null, { root: true });
      }
      return Promise.reject(error); // Báo thất bại
    } finally {
      commit("SET_CART_LOADING", false);
    }
  },

  async removeCartItem({ commit, rootState }, product) {
    const token = rootState.login.token;
    if (!token) return Promise.reject("Authentication required");

    commit("SET_CART_LOADING", true);
    commit("SET_CART_ERROR", null);
    console.log("[Cart Actions] Removing item via API:", product);
    try {
      // Gửi yêu cầu POST đến /api/cart/delete
      const response = await axios.post("/api/cart/delete", product, {
        params: { token },
      });
      commit("UPDATE_CART_ITEMS", response.data);
      console.log(
        "[Cart Actions] Item removed/decreased, cart updated from server."
      );
      return Promise.resolve();
    } catch (error) {
      console.error(
        "[Cart Actions] Error removing item:",
        error.response?.data || error.message
      );
      commit(
        "SET_CART_ERROR",
        error.response?.data?.message || "Failed to remove item"
      );
      if (error.response && error.response.status === 401) {
        // dispatch('login/logoutAction', null, { root: true });
      }
      return Promise.reject(error);
    } finally {
      commit("SET_CART_LOADING", false);
    }
  },

  async removeAllCartItems({ commit, rootState }) {
    const token = rootState.login.token;
    if (!token) return Promise.reject("Authentication required");

    commit("SET_CART_LOADING", true);
    commit("SET_CART_ERROR", null);
    console.log("[Cart Actions] Clearing cart via API...");
    try {
      // Gửi yêu cầu POST đến /api/cart/delete/all
      const response = await axios.post(
        "/api/cart/delete/all",
        {},
        { params: { token } }
      ); // Không cần gửi data body
      commit("UPDATE_CART_ITEMS", response.data); // Nên là mảng rỗng
      console.log("[Cart Actions] Cart cleared, updated from server.");
      return Promise.resolve();
    } catch (error) {
      console.error(
        "[Cart Actions] Error clearing cart:",
        error.response?.data || error.message
      );
      commit(
        "SET_CART_ERROR",
        error.response?.data?.message || "Failed to clear cart"
      );
      if (error.response && error.response.status === 401) {
        // dispatch('login/logoutAction', null, { root: true });
      }
      return Promise.reject(error);
    } finally {
      commit("SET_CART_LOADING", false);
    }
  },
};

const getters = {
  cartItems: (state) => state.cartItems,
  cartQuantity: (state) =>
    state.cartItems.reduce((sum, item) => sum + item.quantity, 0),
  cartTotal: (state) => {
    return state.cartItems
      .reduce((total, item) => total + item.price * item.quantity, 0)
      .toFixed(2);
  },
  cartLoading: (state) => state.loading, // Thêm getter nếu cần
  cartError: (state) => state.error, // Thêm getter nếu cần
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters,
};
product/index.js:
import axios from "axios"; // Import axios

const state = () => ({
  productItems: [],
  loading: false, // Thêm trạng thái loading nếu cần
  error: null, // Thêm trạng thái lỗi nếu cần
});

const mutations = {
  UPDATE_PRODUCT_ITEMS(state, payload) {
    state.productItems = payload;
  },
  SET_PRODUCT_LOADING(state, isLoading) {
    state.loading = isLoading;
  },
  SET_PRODUCT_ERROR(state, error) {
    state.error = error;
  },
};

const actions = {
  async getProductItems({ commit, rootState }) {
    // Lấy token từ login module state
    const token = rootState.login.token;
    if (!token) {
      console.warn("[Product Actions] No token, cannot fetch products.");
      commit("SET_PRODUCT_ERROR", "Authentication required");
      // Có thể dispatch logout hoặc yêu cầu đăng nhập lại
      return;
    }

    commit("SET_PRODUCT_LOADING", true); // Báo bắt đầu tải
    commit("SET_PRODUCT_ERROR", null); // Xóa lỗi cũ
    console.log("[Product Actions] Fetching products with token...");

    try {
      // Gọi API thật bằng axios, truyền token qua params
      const response = await axios.get("/api/products", {
        params: { token: token },
      });
      commit("UPDATE_PRODUCT_ITEMS", response.data); // Cập nhật state
      console.log("[Product Actions] Products fetched successfully.");
    } catch (error) {
      console.error(
        "[Product Actions] Error fetching products:",
        error.response?.data || error.message
      );
      commit(
        "SET_PRODUCT_ERROR",
        error.response?.data?.message || "Failed to fetch products"
      );
      // Xử lý lỗi xác thực (ví dụ: token hết hạn)
      if (error.response && error.response.status === 401) {
        // Cần dispatch action logout ở module login
        // Lưu ý cách dispatch action của module khác: { root: true }
        // dispatch('login/logoutAction', null, { root: true }); // Cần import { dispatch } nếu dùng cách này
        // Hoặc component sẽ xử lý chuyển hướng dựa trên lỗi
      }
    } finally {
      // Luôn commit loading false dù thành công hay thất bại
      commit("SET_PRODUCT_LOADING", false);
    }
  },
};

const getters = {
  productItems: (state) => state.productItems,
  productLoading: (state) => state.loading, // Thêm getter nếu cần
  productError: (state) => state.error, // Thêm getter nếu cần
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters,
};
