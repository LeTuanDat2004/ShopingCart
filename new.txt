Tuyệt vời! Việc chuyển từ mock API sang sử dụng axios để tương tác với API server thật là bước quan trọng để hoàn thiện ứng dụng. Chúng ta sẽ cập nhật lại các file liên quan (chủ yếu là các action trong Vuex store) để thực hiện điều này.

Giả định:

Bạn có một server backend (như server.js đã thảo luận) đang chạy trên http://localhost:3000.
Server này cung cấp các API endpoint như /api/products, /api/cart, /api/login, v.v.
Các endpoint /api/products và /api/cart (và có thể cả các endpoint POST) yêu cầu một token được gửi kèm dưới dạng query parameter (ví dụ: /api/products?token=YOUR_TOKEN).
Bạn đã cài đặt axios: npm install axios.
Bạn đã cấu hình proxy trong vue.config.js hoặc vite.config.js để chuyển tiếp các yêu cầu /api đến http://localhost:3000.
Cập nhật các file:

1. src/store/modules/product.js (Sử dụng axios):

// src/store/modules/product.js
import axios from 'axios'; // Import axios

const state = () => ({
  productItems: [],
  loading: false, // Thêm trạng thái loading nếu cần
  error: null,    // Thêm trạng thái lỗi nếu cần
});

const mutations = {
  UPDATE_PRODUCT_ITEMS(state, payload) {
    state.productItems = payload;
  },
  SET_PRODUCT_LOADING(state, isLoading) {
    state.loading = isLoading;
  },
  SET_PRODUCT_ERROR(state, error) {
    state.error = error;
  }
};

const actions = {
  async getProductItems({ commit, rootState }) {
    // Lấy token từ login module state
    const token = rootState.login.token;
    if (!token) {
      console.warn("[Product Actions] No token, cannot fetch products.");
      commit('SET_PRODUCT_ERROR', 'Authentication required');
      // Có thể dispatch logout hoặc yêu cầu đăng nhập lại
      return;
    }

    commit('SET_PRODUCT_LOADING', true); // Báo bắt đầu tải
    commit('SET_PRODUCT_ERROR', null);  // Xóa lỗi cũ
    console.log("[Product Actions] Fetching products with token...");

    try {
      // Gọi API thật bằng axios, truyền token qua params
      const response = await axios.get('/api/products', {
        params: { token: token }
      });
      commit('UPDATE_PRODUCT_ITEMS', response.data); // Cập nhật state
      console.log("[Product Actions] Products fetched successfully.");
    } catch (error) {
      console.error("[Product Actions] Error fetching products:", error.response?.data || error.message);
      commit('SET_PRODUCT_ERROR', error.response?.data?.message || 'Failed to fetch products');
      // Xử lý lỗi xác thực (ví dụ: token hết hạn)
      if (error.response && error.response.status === 401) {
         // Cần dispatch action logout ở module login
         // Lưu ý cách dispatch action của module khác: { root: true }
         // dispatch('login/logoutAction', null, { root: true }); // Cần import { dispatch } nếu dùng cách này
         // Hoặc component sẽ xử lý chuyển hướng dựa trên lỗi
      }
    } finally {
      // Luôn commit loading false dù thành công hay thất bại
      commit('SET_PRODUCT_LOADING', false);
    }
  }
};

const getters = {
  productItems: state => state.productItems,
  productLoading: state => state.loading, // Thêm getter nếu cần
  productError: state => state.error     // Thêm getter nếu cần
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};
content_copy
download
Use code with caution.
JavaScript
2. src/store/modules/cart.js (Sử dụng axios):

// src/store/modules/cart.js
import axios from 'axios';

const state = () => ({
  cartItems: [],
  loading: false, // Có thể thêm loading/error riêng cho cart
  error: null
});

const mutations = {
  UPDATE_CART_ITEMS(state, payload) {
    state.cartItems = payload;
  },
   SET_CART_LOADING(state, isLoading) {
    state.loading = isLoading;
  },
  SET_CART_ERROR(state, error) {
    state.error = error;
  }
  // Không cần các mutation riêng cho add/remove vì server luôn trả về cart mới
};

const actions = {
  async getCartItems({ commit, rootState }) {
    const token = rootState.login.token;
    if (!token) {
        console.warn("[Cart Actions] No token, cannot fetch cart.");
        commit('SET_CART_ERROR', 'Authentication required');
        // commit('UPDATE_CART_ITEMS', []); // Có thể reset cart về rỗng
        return;
    }
    commit('SET_CART_LOADING', true);
    commit('SET_CART_ERROR', null);
    console.log("[Cart Actions] Fetching cart items...");
    try {
      const response = await axios.get('/api/cart', { params: { token } });
      commit('UPDATE_CART_ITEMS', response.data);
      console.log("[Cart Actions] Cart fetched.");
    } catch (error) {
      console.error("[Cart Actions] Error fetching cart:", error.response?.data || error.message);
      commit('SET_CART_ERROR', error.response?.data?.message || 'Failed to fetch cart');
       if (error.response && error.response.status === 401) {
            // dispatch('login/logoutAction', null, { root: true });
       }
    } finally {
       commit('SET_CART_LOADING', false);
    }
  },

  async addCartItem({ commit, rootState }, product) {
    const token = rootState.login.token;
    if (!token) return Promise.reject('Authentication required'); // Trả về lỗi

    commit('SET_CART_LOADING', true); // Có thể set loading khi thao tác
    commit('SET_CART_ERROR', null);
    console.log("[Cart Actions] Adding item via API:", product);
    try {
      // Gửi yêu cầu POST, data là product, token trong params
      const response = await axios.post('/api/cart', product, { params: { token } });
      commit('UPDATE_CART_ITEMS', response.data); // Cập nhật state bằng response từ server
      console.log("[Cart Actions] Item added, cart updated from server.");
      return Promise.resolve(); // Báo thành công
    } catch (error) {
      console.error("[Cart Actions] Error adding item:", error.response?.data || error.message);
       commit('SET_CART_ERROR', error.response?.data?.message || 'Failed to add item');
       if (error.response && error.response.status === 401) {
            // dispatch('login/logoutAction', null, { root: true });
       }
       return Promise.reject(error); // Báo thất bại
    } finally {
       commit('SET_CART_LOADING', false);
    }
  },

  async removeCartItem({ commit, rootState }, product) {
    const token = rootState.login.token;
    if (!token) return Promise.reject('Authentication required');

    commit('SET_CART_LOADING', true);
    commit('SET_CART_ERROR', null);
    console.log("[Cart Actions] Removing item via API:", product);
    try {
      // Gửi yêu cầu POST đến /api/cart/delete
      const response = await axios.post('/api/cart/delete', product, { params: { token } });
      commit('UPDATE_CART_ITEMS', response.data);
      console.log("[Cart Actions] Item removed/decreased, cart updated from server.");
      return Promise.resolve();
    } catch (error) {
       console.error("[Cart Actions] Error removing item:", error.response?.data || error.message);
       commit('SET_CART_ERROR', error.response?.data?.message || 'Failed to remove item');
        if (error.response && error.response.status === 401) {
            // dispatch('login/logoutAction', null, { root: true });
       }
       return Promise.reject(error);
    } finally {
       commit('SET_CART_LOADING', false);
    }
  },

  async removeAllCartItems({ commit, rootState }) {
    const token = rootState.login.token;
    if (!token) return Promise.reject('Authentication required');

    commit('SET_CART_LOADING', true);
    commit('SET_CART_ERROR', null);
    console.log("[Cart Actions] Clearing cart via API...");
    try {
       // Gửi yêu cầu POST đến /api/cart/delete/all
      const response = await axios.post('/api/cart/delete/all', {}, { params: { token } }); // Không cần gửi data body
      commit('UPDATE_CART_ITEMS', response.data); // Nên là mảng rỗng
      console.log("[Cart Actions] Cart cleared, updated from server.");
      return Promise.resolve();
    } catch (error) {
      console.error("[Cart Actions] Error clearing cart:", error.response?.data || error.message);
      commit('SET_CART_ERROR', error.response?.data?.message || 'Failed to clear cart');
       if (error.response && error.response.status === 401) {
            // dispatch('login/logoutAction', null, { root: true });
       }
      return Promise.reject(error);
    } finally {
       commit('SET_CART_LOADING', false);
    }
  }
};

const getters = {
  cartItems: state => state.cartItems,
  cartQuantity: state => state.cartItems.reduce((sum, item) => sum + item.quantity, 0),
  cartTotal: state => {
    return state.cartItems.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
  },
  cartLoading: state => state.loading, // Thêm getter nếu cần
  cartError: state => state.error     // Thêm getter nếu cần
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};
content_copy
download
Use code with caution.
JavaScript
3. src/store/modules/login.js (Sử dụng axios):

// src/store/modules/login.js
import axios from 'axios';

const initialToken = localStorage.getItem('authToken');

const state = () => ({
  token: initialToken || null,
  loading: false,
  error: null,
});

const mutations = {
  SET_TOKEN(state, token) {
    state.token = token;
  },
  SET_LOADING(state, isLoading) {
    state.loading = isLoading;
  },
  SET_ERROR(state, error) {
    state.error = error;
  },
  CLEAR_AUTH(state) {
    state.token = null;
    state.loading = false;
    state.error = null;
  }
};

const actions = {
  async loginAction({ commit }) {
    commit('SET_LOADING', true);
    commit('SET_ERROR', null);
    console.log("[Login Action] Attempting login via API...");
    try {
      // Gọi API thật, không cần gửi data body, không cần token
      const response = await axios.post('/api/login');
      const token = response.data.token;

      if (!token) { // Kiểm tra nếu API không trả về token như mong đợi
          throw new Error('Token not received from server');
      }

      localStorage.setItem('authToken', token);
      commit('SET_TOKEN', token);
      console.log("[Login Action] Login successful, token set.");
      // Không cần trả về gì, component tự chuyển hướng
    } catch (error) {
      console.error("[Login Action] Login failed:", error.response?.data || error.message);
      localStorage.removeItem('authToken');
      commit('CLEAR_AUTH');
      commit('SET_ERROR', error.response?.data?.message || 'Login failed');
      throw error; // Ném lỗi để component LoginBox có thể bắt và hiển thị thông báo
    } finally {
      commit('SET_LOADING', false);
    }
  },

  logoutAction({ commit }) {
    return new Promise((resolve) => {
      localStorage.removeItem('authToken');
      commit('CLEAR_AUTH');
      console.log('[Login Action] Logged out.');
      resolve();
    });
  },

  // Action để kiểm tra token khi khởi tạo (có thể gọi từ App.vue)
  checkAuth({ commit }) {
      const token = localStorage.getItem('authToken');
      if (token) {
          console.log('[Login Action] Found token in localStorage, setting in store.');
          commit('SET_TOKEN', token);
          // Có thể thêm lệnh gọi API để xác thực token này với server ở đây nếu cần
      } else {
          console.log('[Login Action] No token found in localStorage.');
          commit('CLEAR_AUTH'); // Đảm bảo state sạch nếu không có token
      }
  }
};

const getters = {
  isAuthenticated: state => !!state.token,
  loading: state => state.loading,
  token: state => state.token,
  loginError: state => state.error // Thêm getter cho lỗi login
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};
content_copy
download
Use code with caution.
JavaScript
4. Cập nhật Component (Ví dụ App.vue):

Bạn cần gọi action checkAuth khi App được tạo để đồng bộ token từ localStorage vào Vuex state ngay từ đầu.

// src/App.vue
// ... imports ...
import { onMounted } from 'vue'; // Dùng onMounted trong setup

// ... script setup ...
const store = useStore();
const router = useRouter();

// ... computed properties (isAuthenticated, cartQuantity) ...

// ... performLogout method ...

// Gọi checkAuth khi component được mount
onMounted(() => {
  store.dispatch('login/checkAuth');
  // Chỉ gọi fetch dữ liệu nếu ĐÃ xác thực (token hợp lệ)
  // Việc fetch này nên được chuyển vào watch token hoặc làm trong checkAuth nếu cần xác thực token
  // const token = store.getters['login/token'];
  // if (token) {
  //   store.dispatch('cart/getCartItems');
  //   store.dispatch('product/getProductItems');
  // }
});

// Vẫn giữ watch token để fetch dữ liệu KHI đăng nhập thành công
watch(token, (newToken, oldToken) => {
  if (newToken && !oldToken) { // Chỉ khi chuyển từ null -> token
    console.log('App watch: Token changed, fetching initial data...');
    store.dispatch('cart/getCartItems');
    store.dispatch('product/getProductItems');
  }
});
content_copy
download
Use code with caution.
JavaScript
Lưu ý quan trọng:

Xử lý lỗi API: Code trên đã thêm try...catch cơ bản và commit mutation SET_..._ERROR. Bạn cần hiển thị các thông báo lỗi này trên giao diện người dùng nếu muốn.
Xác thực Token: Action checkAuth hiện tại chỉ đọc từ localStorage. Trong ứng dụng thực tế, bạn nên thêm một lệnh gọi API (axios.get('/api/verify-token') chẳng hạn) bên trong checkAuth để xác nhận với server rằng token đó còn hợp lệ hay không. Nếu không hợp lệ, nên dispatch logoutAction.
Truyền Token: Cách truyền token (params: { token } cho GET, POST) là ví dụ. Backend của bạn có thể yêu cầu truyền qua Header (Authorization: Bearer ${token}). Hãy điều chỉnh axios call cho phù hợp.
Loading State: Các mutation SET_..._LOADING đã được thêm. Bạn có thể dùng mapGetters để lấy trạng thái loading trong component và hiển thị spinner hoặc vô hiệu hóa nút khi cần.
Sau khi áp dụng các thay đổi này, ứng dụng Shopping Cart của bạn sẽ hoàn toàn sử dụng axios để giao tiếp với backend API thật (hoặc mock API được cấu trúc tương tự), thay vì dựa vào các hàm mock cục bộ.
